# ETCDCTL_API=3 etcdctl version
# vi /etc/kubernetes/manifests/etcd.yaml

# ETCDCTL_API=3 etcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key member list

# ETCDCTL_API=3 etcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot save /tmp/etcd-backup.db

# ETCDCTL_API=3 etcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot status /tmp/etcd-backup.db -w table


# 리소스 상세 요구사항 파드 작성
# kubectl run elephant --image=redis --dry-run -o yaml > elephant.yaml
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: elephant
  name: elephant
spec:
  containers:
  - image: redis
    name: elephant
    resources:
      requests:
        cpu: "1"
        memory: "200"
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

#SYS_TIME 권한이 있는 컨테이너 작성 (security-context)
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: super-user-pod
spec:
  containers:
  - image: busybox:1.28
    name: super-user-pod
    command: ["sleep", "4800"]
    securityContext:
      capabilities:
        add: ["SYS_TIME"]

---
#PV에 PVC 연결
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi

---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: use-pv
  name: use-pv
spec:
  containers:
  - image: nginx
    name: use-pv
    resources: {}
    volumeMounts:
    - mountPath: "/data"
      name: mypd
  volumes:
  - name: mypd
    persistentVolumeClaim:
      claimName: my-pvc

# 앱 배포 및 업데이트
# kubectl run nginx-deploy --image=nginx:1.16 --replicas=1 --dry-run -o yaml > deploy.yaml
# kubectl create -f deploy.yaml --record
# kubectl rollout history deployment nginx-deploy
# kubectl set image deployment/nginx-deploy nginx-deploy=nginx:1.17 --record


#csr 생성

# cat john.csr | base64 | tr -d "\n"
---
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: john-developer
spec:
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZEQ0NBVHdDQVFBd0R6RU5NQXNHQTFVRUF3d0VhbTlvYmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQUxaNU5xL29xR1pvVlRaeWpPanhsNW9EVWJkN0ZQZlk0Nm0vM0xWUU5BZjZjWWRHCktHQjFyMW5aWVFCaWRqMDBUamlZS0M0SngzZkhYeDhXUWU3VU9WTk04ZCt0NkczbHhLdm5zU1hDRDgyeWR0eUkKNHpBaU9PY2ZXUmhjSmtiWGk4WE1wSWtyVXg0NmRGVGljUXgvcDkwUlk0Q1A2bzVLSUk5c0ZYK1ZjRGNmb0RFZApzbHVZUERBRWozRzBobTRaU3pPREtLQm5Wb0xaYjVKYnVqNGJBUk1Dd25CS2wyT0VzMGorZzU2VEIra25DMU1zCkVwNVVRbFJOcU1vV3dYVHlxNFE2VThYSVhJY0pkdjFKV2FRODczWnRJeEh3WXBRSUJHc3Ryc29IQlBOWXdUMlEKZ294ZFR2cHpjaENRc0FvZ1lTMTB1dlE1dmp3UHBaN0FyNjcvUUJNQ0F3RUFBYUFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1ExaHJjcUZqVG9xUkFaRGh2ajZIV1FSWmI0dFlGM3oyS0E4WEZ6K0VwMTlyT3NvK2F0a21FClhtTHRWa0FlaFRHbTMvR0dUeW90UVJoSVFiOE9HMnhVeXFiNzFNaFV5TnptQjhVa2d5a3k3UERQaXlEMkJiQTMKOEVhZWp4R3lLL2NoTE5FNkVzZFpkcWRRVnROa0NlZXVhQnV3T0JCK2tzcWdmcWhLb3BVNXdBV29MOTNVSE9QKwpPMUV1RDZOMzBNMXpBOUMyOEVqZnk0MCtDdHk1VlJ2dDlWWEJEMzJsZ0RCaDBBc1RUVG9PaXdOL0RqWjdacGlwCmcrK1AvUGtRbWZLOXJLcGozdVFXYkJuSVlvQ3hRVzk3REhxek9raTFSZk5mODAyN1V2WUhpMUo4bTB0WGdmTlgKMGdURWhsR1hEbnI2UG95R05qbzh0UWhva0RUN3g1R2kKLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
  usages:
  - digital signature
  - key encipherment
  - server auth

# kubectl get csr
# kubectl certificate approve john-developer
# kubectl create role developer --resource=pods --verb=create,list,get,update,delete --namespace=development
# kubectl create rolebinding developer-role-binding --role=developer --user=john --namespace=development
# kubectl auth can-i update pods -n development --as=john


# 파드 생성 및 DNS레코드 조회
# kubectl run nginx-resolver --image=nginx
# kubectl expose pod nginx-resolver --name=nginx-resolver-service --port=80 --target-port=80 --type=ClusterIP
# kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup > /root/nginx.svc
# kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup {퍄드IP,10-32-0-5}.default.pod > /root/nginx.pod
